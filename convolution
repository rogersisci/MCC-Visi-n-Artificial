
!pip install nvcc4jupyter


!pip install opencv-python-headless

!pip install pycuda

import cv2
import numpy as np
import pycuda.driver as cuda
import pycuda.autoinit
from pycuda.compiler import SourceModule
from google.colab.patches import cv2_imshow


from google.colab import drive
drive.mount('/content/drive')

# Cargar la imagen de tu drive
image_path = "/content/drive/MyDrive/Proceso de Imagenes/imagen-grises.png"


image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)


if image is None:
    print("Error: Unable to load image")
else:
    print("Image loaded successfully")


h_img = image.flatten().astype(np.uint8)


cuda_code = """
__global__ void histogram_atomic(int *d_b, unsigned char *d_a, int size)
{
    int tid = threadIdx.x + blockDim.x * blockIdx.x;
    if (tid < size)
    {
        atomicAdd(&(d_b[d_a[tid]]), 1);
    }
}
"""


mod = SourceModule(cuda_code)


histogram_atomic = mod.get_function("histogram_atomic")


size = len(h_img)
h_b = np.zeros(256, dtype=np.int32)


d_img = cuda.mem_alloc(h_img.nbytes)
d_b = cuda.mem_alloc(h_b.nbytes)


cuda.memcpy_htod(d_img, h_img)
cuda.memset_d32(d_b, 0, 256)


block_size = 256
grid_size = (size + block_size - 1) // block_size
histogram_atomic(d_b, d_img, np.int32(size), block=(block_size, 1, 1), grid=(grid_size, 1))


cuda.memcpy_dtoh(h_b, d_b)


for i in range(len(h_b)):
    print(f"bin {i} : count {h_b[i]}")


cuda_code_convolution = """
__global__ void convolution(unsigned char *input, unsigned char *output, int width, int height, float *mask, int mask_width, int mask_height)
{
    int x = threadIdx.x + blockIdx.x * blockDim.x;
    int y = threadIdx.y + blockIdx.y * blockDim.y;

    if (x < width && y < height)
    {
        float sum = 0.0;
        for (int i = 0; i < mask_height; i++)
        {
            for (int j = 0; j < mask_width; j++)
            {
                int idx = (y + i - mask_height / 2) * width + (x + j - mask_width / 2);
                if (idx >= 0 && idx < width * height)
                {
                    sum += mask[i * mask_width + j] * input[idx];
                }
            }
        }
        output[y * width + x] = sum;
    }
}
"""


mod_convolution = SourceModule(cuda_code_convolution)


convolution = mod_convolution.get_function("convolution")


width = image.shape[1]
height = image.shape[0]
mask_width = 3  # Ancho de la m치scara
mask_height = 3  # Alto de la m치scara
mask = np.ones((mask_height, mask_width), dtype=np.float32) / (mask_width * mask_height)  # M치scara de convoluci칩n (filtro de promedio)


d_input = cuda.mem_alloc(image.nbytes)
d_output = cuda.mem_alloc(image.nbytes)
d_mask = cuda.mem_alloc(mask.nbytes)


cuda.memcpy_htod(d_input, image)
cuda.memcpy_htod(d_mask, mask)


block_size = (16, 16)
grid_size = ((width + block_size[0] - 1) // block_size[0], (height + block_size[1] - 1) // block_size[1])


convolution(d_input, d_output, np.int32(width), np.int32(height), d_mask, np.int32(mask_width), np.int32(mask_height), block=(block_size[0], block_size[1], 1), grid=grid_size)
image_convolved = np.empty_like(image)

cuda.memcpy_dtoh(image_convolved, d_output)


cv2_imshow(image_convolved)
